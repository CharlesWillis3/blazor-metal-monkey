@using Microsoft.Extensions.Logging
@inject Microsoft.Extensions.Logging.ILogger<RouteTable> Logger
<h3>RouteTable</h3>

<CascadingValue Value="this">
    @ChildContent
</CascadingValue>


@code {

    private List<MetalRouteBase> _routes = new List<MetalRouteBase>();

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public MetalRouteContext? RouteContext { get; set; }

    public bool HasActiveRoute { get; private set; }

    internal void AddRoute(MetalRouteBase metalRoute)
    {
        Logger.LogInformation("Adding new route {0}", metalRoute.GetType());

        Microsoft.Assumes.Present(RouteContext);

        _routes.Add(metalRoute);
        if (metalRoute.TryActivate(RouteContext))
        {
            Logger.LogInformation("Route activated {0}", metalRoute.GetType());
            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        HasActiveRoute = false;
    }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        foreach (var p in parameters.ToDictionary())
        {
            Logger.LogCritical("{key}={value}", p.Key, p.Value);
        }

        return base.SetParametersAsync(parameters);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        HasActiveRoute = _routes.Any(r => r.IsActive);
        _routes.ForEach(r => r.Deactivate());
    }
}
